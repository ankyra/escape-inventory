# The build name. Format: /[a-zA-Z]+[a-zA-Z0-9-]*/
#
name: test

# The version. Either specify the full version or use the '@' symbol to 
# let Escape pick the next version at build time. Format: /[0-9]+(\.[0-9]+)*(\.@)?/
# 
# Examples:
#
# Build version 1.5:
#   version: 1.5
#
# Build the next minor release in the 1.* series:
#   version: 1.@
#
# Build the next path release in the 1.1.* series:
#   version: 1.1.@
#
version: 0.1.@

# An (optional) description for this release.
#
description: Test description

logo: logo.png

extends:
- extends1

# Dependencies. Reference dependencies by their full release ID or use
# the '@' symbol to resolve versions at build time.
#
# Examples:
#
# Reference the full release ID to pin to a particular version:
#   depends: [archive-example-v0.1]
#
# To always get the latest version of a particular release:
#   depends: [archive-example-latest]
#
# Or:
#   depends: [archive-example-@]
#
# To resolve the latest minor release:
#   depends: [archive-example-v0.@]
#
# To resolve the latest path release:
#   depends: [archive-example-v0.1.@]
#
depends:
- depends1
- depends2

# The release can consume zero or more providers from the environment its
# deployed in.
#
consumes:
- provider1
- provider2

# The release can provide zero or more providers for other releases to 
# consume at deployment time.
#
provides:
- consumer1
- consumer2

# Input variables. 
#
# Examples:
#
#   inputs:
#   - string_input
#
#   - id: full_string
#     description: "A nice description"
#     friendly: "Friendly variable display name"
#     type: string
#
#   - id: int
#     type: int
#
#   - id: choice_string
#     type: string
#     default: first
#     items:
#     - first
#     - second
#
# Escape script can be used in the default field to reference values from other 
# dependencies:
#
#   inputs:
#   - id: example
#     default: $dependency.outputs.output_variable
#
# Supported types are "string" (default), "int", "list" and the special types:
# "version", "project", "environment" and "deployment" which are automatically 
# populated by Escape.
#
inputs:
- input1
- default: $test.outputs.test
  id: input2
  type: string

# Output variables (see input variables for documentation)
#
outputs:
- output1
- default: $test.outputs.test
  id: output2
  type: string

# Metadata key value pairs.
#
# Escape script can be used as values, but note that the metadata is compiled
# at build time, so dependency inputs and outputs can't be referenced.
# 
# Example:
#
#   metadata:
#     author: Fictional Character
#     co_author: $dependency.metadata.author
#
metadata:
  key1: value1
  key2: value2

# The files to includes in this release. The files don't have to exist at 
# build time. Globbing patterns are supported.
#
includes:
- file1.txt
- '*.txt'

# Errands.
#
# Errands are scripts that can be run against the deployment of this release.
# The scripts receive the deployment's inputs and outputs as environment
# variables.
#
# Examples:
#
#   errands:
#     my-errand:
#       description: "Run this errand to do something special"
#       script: bin/my_errand.sh
#       inputs:
#       - extra_input
#
# For information on the syntax of the input variables see the "inputs" field.
#
errands:
  errand1:
    description: Errand 1 description
    inputs:
    - input1
    - input2
    script: path/to/script1.sh
  errand2:
    description: Errand 2 description
    inputs:
    - input1
    - input2
    script: path/to/script2.sh

templates:
- template.yml.tpl

path: path.txt

# A script to run before the build.
#
# The script has access to the input variables (prepended with INPUT_)
# in the environment.
#
# Examples:
#
# Given the escape plan:
#
#   inputs:
#    - test_input
#   pre_build: pre_build.sh
#
# We can get the value of the input variable in pre_build.sh:
#
#   echo $INPUT_test_input
#
pre_build: pre_build.sh

build: build.sh

# A script to run after the build.
#
# The script has access to the input variables (prepended with INPUT_) 
# and output variables (prepended with OUTPUT_) in the environment.
#
# Examples:
#
# Given the escape plan:
#
#   inputs:
#    - test_input
#   outputs:
#   - test_output
#   post_build: post_build.sh
#
# We can get the value of the variables in post_build.sh:
#
#   echo $INPUT_test_input $OUTPUT_test_output
#
post_build: post_build.sh

test: test.sh

pre_deploy: pre_deploy.sh

deploy: deploy.sh

post_deploy: post_deploy.sh

smoke: smoke.sh

pre_destroy: pre_destroy.sh

destroy: destroy.sh

post_destroy: post_destroy.sh

