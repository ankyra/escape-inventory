// Code generated by go-bindata.
// sources:
// dao/ql/schemas/1_initial_schema.down.sql
// dao/ql/schemas/1_initial_schema.up.sql
// DO NOT EDIT!

package ql

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var __1_initial_schemaDownSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x72\x09\xf2\x0f\x50\x08\x71\x74\xf2\x71\x55\x28\x4a\xcd\x49\x4d\x2c\x4e\xb5\xe6\x42\x12\x2b\x48\x4c\xce\x4e\x4c\x47\x15\x4b\x4c\xce\x41\x55\x53\x94\x9f\x95\x9a\x5c\x82\xaa\xa6\xa0\x20\x27\x33\x39\xb1\x24\x33\x3f\x0f\x45\x1c\x6a\x47\x7c\x4a\x6a\x41\x6a\x5e\x4a\x6a\x5e\x72\x25\x8a\x74\x71\x69\x52\x71\x72\x51\x66\x01\x48\x5f\xb1\x35\x20\x00\x00\xff\xff\xb3\x3e\xc0\xc0\x9c\x00\x00\x00")

func _1_initial_schemaDownSqlBytes() ([]byte, error) {
	return bindataRead(
		__1_initial_schemaDownSql,
		"1_initial_schema.down.sql",
	)
}

func _1_initial_schemaDownSql() (*asset, error) {
	bytes, err := _1_initial_schemaDownSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "1_initial_schema.down.sql", size: 156, mode: os.FileMode(420), modTime: time.Unix(1510843130, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var __1_initial_schemaUpSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xbc\x94\x41\x8f\xd3\x3e\x10\xc5\xcf\xe9\xa7\x18\xf5\xb4\x7f\x29\x7f\x09\xce\x9c\x0a\x9b\x95\x2a\x55\x5d\xb1\x9b\x4a\x7b\x8b\xdc\x78\x36\x98\xba\xb6\x65\x3b\x40\x41\x7c\x77\xd4\x24\x76\x63\x3b\xdd\x0d\x08\x71\x7d\x99\xd8\x33\xbf\x79\x7e\x8b\x0f\x0f\xc5\xaa\x2c\xa0\x5c\xbd\xdf\x14\xb0\xbe\x83\xed\x7d\x09\xc5\xd3\xfa\xb1\x7c\x04\x8d\x1c\x89\x41\xb8\x59\x00\x00\x08\x72\x44\x30\x56\x33\xd1\xe4\xd0\x29\xc3\xf7\x8a\x51\xa7\x77\xf2\x17\xd4\x86\x49\x11\x68\x47\xb4\x84\x12\x4b\x02\x51\x69\xf9\x19\x6b\x1b\x6b\x35\x1a\x83\xb4\xa2\xa8\x50\x50\x14\x35\x43\x03\x7b\x29\x39\xdc\x16\x77\xab\xdd\xa6\x84\x67\xc2\x0d\xf6\xe5\x54\x7e\x15\x5c\x12\x6a\x80\x09\xeb\x0b\xde\xf4\x1f\x5b\x75\xfe\x84\xb4\xda\x9f\x86\x3b\x7c\xc5\x72\x19\x95\x10\x1b\x9f\xf0\xdf\xbb\x85\x83\xb3\xdb\xae\x3f\xee\x0a\x58\x6f\x6f\x8b\xa7\x69\x46\x95\x3a\xc0\xfd\xf6\x42\xec\x0c\x2b\x77\x24\x72\x37\xe9\xe8\xc8\x29\xde\x8a\xd4\x07\xd2\x38\xde\x53\x74\x52\xe2\xfd\x26\x5a\xcd\x42\xe1\x99\x71\x34\xec\x3b\x06\x43\xfd\xff\xf6\xdf\x71\x19\x66\x19\xb8\xf8\xc9\x2e\x03\xe4\xe7\xa6\xe7\x92\x21\x35\x7f\x81\x4a\xa3\x65\xab\xaa\xd4\x9f\x0a\xf5\x91\x99\xce\x8b\x4c\xd8\xb9\x9d\x93\x9a\x0f\x5d\x77\xb7\x0e\x17\xe6\xa3\x5b\x5e\x5b\xe3\xd0\x62\xfa\x6c\x7a\xcb\xa2\xa9\x35\x53\x36\x7e\x22\x52\x37\xbb\x87\x4d\x20\x71\xd9\xc8\x40\xf8\x24\xe5\xc1\x24\x3b\xfb\xf1\x73\x39\x7b\x2d\x7d\x6f\x6e\x2d\xae\xd3\x19\x53\x11\xa5\x38\xab\x49\xd7\xf6\xb5\x40\x98\x5a\x4e\x3a\x6e\x62\x36\x4e\x2c\x1a\x5b\x85\xb9\x91\x56\x5d\x60\x5c\xb7\xeb\x1f\x39\xfa\xaf\x90\x1d\xf1\x71\xf6\x19\x13\xeb\x03\x61\x9e\xdb\xdd\x23\xf1\x09\x78\x7a\xc1\xfc\x89\xbf\xa6\xe2\x97\xa2\xaa\xa6\x97\x13\xbe\x1b\x2f\x4e\x1d\xb2\x6f\x19\xa7\x95\xa9\xa5\xc2\x2e\x8f\x7d\x35\x97\xa7\x44\x66\xa6\xc2\x6f\x16\x45\x77\xca\x54\x7a\xff\x66\xbe\x5e\x58\x84\x51\x1b\x40\xf2\x6f\x35\x8a\xdf\xd1\xf8\xb9\x9f\x39\x1f\x0f\xfa\xca\x46\x4c\xbb\xf7\x2e\x36\x70\xb3\xc8\x02\x68\x59\x8c\x36\x1b\xd7\x87\x80\xc3\x4f\xf1\x8f\xd7\x98\x04\xf7\x0f\x00\xa2\x9e\x02\x83\xe5\x90\x74\x10\x49\xde\x89\x59\x06\xbf\x02\x00\x00\xff\xff\xfe\x5b\x1f\x6e\x04\x08\x00\x00")

func _1_initial_schemaUpSqlBytes() ([]byte, error) {
	return bindataRead(
		__1_initial_schemaUpSql,
		"1_initial_schema.up.sql",
	)
}

func _1_initial_schemaUpSql() (*asset, error) {
	bytes, err := _1_initial_schemaUpSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "1_initial_schema.up.sql", size: 2052, mode: os.FileMode(420), modTime: time.Unix(1510843140, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"1_initial_schema.down.sql": _1_initial_schemaDownSql,
	"1_initial_schema.up.sql": _1_initial_schemaUpSql,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"1_initial_schema.down.sql": &bintree{_1_initial_schemaDownSql, map[string]*bintree{}},
	"1_initial_schema.up.sql": &bintree{_1_initial_schemaUpSql, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

