// Code generated by go-bindata.
// sources:
// dao/postgres/schemas/.1_initial_schema.up.sql.swp
// dao/postgres/schemas/.2_project_metadata.up.sql.swp
// dao/postgres/schemas/1_initial_schema.down.sql
// dao/postgres/schemas/1_initial_schema.up.sql
// dao/postgres/schemas/2_project_metadata.down.sql
// dao/postgres/schemas/2_project_metadata.up.sql
// DO NOT EDIT!

package postgres

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var __1_initial_schemaUpSqlSwp = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\xd9\x41\x6b\x13\x4d\x18\x07\xf0\x7f\xdf\xf7\xe2\xa5\xb3\x45\xc1\xf3\xa8\x97\x04\xd6\x6c\x93\xd8\x56\x11\x0f\x51\x22\x04\xad\x4a\x1a\xc5\x78\x09\x4f\x36\xe3\x66\x6c\xb2\x3b\xce\x4c\x4a\xe3\x41\xbf\x80\x82\x07\x05\x41\xf0\xe8\x07\xd1\x4f\x21\x7e\x01\xbf\x81\x47\x25\xd9\xd4\xd2\x9a\x5a\xbd\x58\xa4\xcf\xef\xb2\xc9\xcc\xb3\xcf\xfc\x9f\xb9\x85\x74\x97\xef\x35\xd6\xe5\x5a\xe9\x02\x00\x2c\x01\x0f\x97\x5e\xb6\x4f\xbc\x7b\x8b\x2f\xdb\x40\xd7\x19\xa2\xd4\xe1\x30\x5d\xa7\xd7\x0e\x2d\x02\xf0\x74\xd6\x30\x72\x36\x8e\xaa\xb6\x67\xc8\xfa\x71\x94\x64\x86\x7c\x7f\xba\x96\x68\xdf\x1f\x75\x4b\x71\x36\x8c\x28\xdd\x1c\x5b\x8a\x94\x8b\xc9\xa8\xf3\x56\x25\xda\x79\x3b\x8e\x7a\x94\x45\x26\x73\x3e\xb1\xca\x45\x2e\xee\xab\x21\xb9\xa8\xdc\xd1\xa9\xf6\x9a\x06\x9d\x7c\xa5\x34\x32\x25\xf7\x78\xf0\x3b\x91\x18\x3b\x46\x16\x51\xad\x94\x97\x27\x9f\xce\x9d\x3d\x23\x4f\x9d\xbc\x7b\xd4\x81\x18\x63\x8c\x31\xc6\x18\x63\x7f\x91\x37\x0b\x78\x06\xe0\xbf\xd9\xf7\xd3\xb3\xe7\xc2\xbe\x27\x63\x8c\x31\xc6\x18\x63\x8c\x31\xc6\xfe\x5d\xd4\x03\x9e\x2f\x02\x10\xf9\xff\xff\x3b\xbf\xff\x3f\x07\xc0\xc7\x00\x78\x1f\x00\x2f\x02\xe0\x49\x00\x50\x00\x5c\x0a\x80\xd5\x00\x58\x09\x80\xa5\x00\xf8\x2a\x80\x4f\x02\xf8\x20\x80\x37\x02\x78\x2d\x80\x57\x02\x70\x02\x78\x20\x80\x2b\x02\x28\x08\xe0\x7f\x91\x9f\xf1\x6d\xf1\x88\x07\x66\x8c\x31\xc6\x18\x63\x8c\xb1\x63\xaa\x78\x19\x52\x4a\x79\xa7\xd9\x58\xaf\x35\xdb\xf2\x46\xbd\x5d\x30\x36\x7b\xa4\x62\x1f\xca\xc4\x66\x23\xd3\x49\x69\xa8\x8a\xd3\x22\xa3\xec\x50\x3b\xa7\xb3\x54\xea\xd4\x87\x72\xba\xb8\x5b\x24\xb7\xc8\xc6\x7d\xb2\x85\xca\xca\x6a\x31\xcc\xdf\xc8\x5b\xfd\xd8\xa9\x56\x8a\x21\xae\x35\xeb\xb5\x56\x5d\xb6\x6a\x57\x6f\xd6\x65\xe3\xba\xbc\x75\xbb\x25\xeb\xf7\x1b\x1b\xad\x0d\x49\xf1\x40\x16\xe6\x86\xb2\x6a\xa0\xc8\xa9\x8e\xee\x85\x72\x64\x75\xb8\xd3\x3a\x4f\x36\xb2\x7a\xef\xe9\x79\xb6\xdd\x97\xe6\xed\xfe\x69\x38\x43\xf1\x26\x25\xea\x80\x80\x93\x1b\x08\xe5\x96\xb2\x93\xfb\xd9\x17\x6f\xee\x49\x93\x8d\xa1\xf2\xd4\x23\x4f\xd2\xab\x6d\x9f\x2f\xcd\x3a\xfc\x5c\x7b\xd0\x30\xd3\xcd\x3d\xf7\x5f\xae\x5c\x9c\xcc\xf8\x8b\x51\x66\xbd\x64\x01\xdf\x03\x00\x00\xff\xff\x2a\xa6\xdd\x94\x00\x30\x00\x00")

func _1_initial_schemaUpSqlSwpBytes() ([]byte, error) {
	return bindataRead(
		__1_initial_schemaUpSqlSwp,
		".1_initial_schema.up.sql.swp",
	)
}

func _1_initial_schemaUpSqlSwp() (*asset, error) {
	bytes, err := _1_initial_schemaUpSqlSwpBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: ".1_initial_schema.up.sql.swp", size: 12288, mode: os.FileMode(420), modTime: time.Unix(1502797803, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var __2_project_metadataUpSqlSwp = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\xda\xc1\x6a\xd4\x40\x18\x07\xf0\x7f\xbd\x78\x92\x11\x7d\x81\x51\x2f\x1b\xa8\x99\xba\xad\xed\xc1\x8b\xb1\x06\x2c\xb6\x20\xa1\x2d\xec\xa9\x4c\x92\x21\x1b\x6d\x32\xe3\xcc\x14\xba\x20\xf6\x1d\x04\x4f\x7a\xf4\x35\x7c\x02\x8f\xbe\x80\x47\x7d\x0b\xe9\x36\x8a\xf4\xb2\x9e\x5c\xc5\xff\xef\x32\xf9\xbe\xfc\xf9\xf8\xae\x21\x53\xae\x1d\xee\xec\xc9\xad\x74\x03\x00\xae\x03\x0f\xbf\xbc\x99\x7c\x7a\xff\x0e\x5f\x4f\x81\x32\x38\xad\xfb\x80\x45\xca\xd0\x6e\x2d\x0c\x01\x78\x3d\x0c\x54\xc1\x57\x6a\xdd\xd7\x4e\xfb\x38\x53\x8d\x75\x3a\x4e\xe7\xbd\xa6\x8d\xd3\x93\x32\xad\x6c\xa7\x74\xff\x62\xe6\xb5\x32\xa1\xd2\xce\xdc\xf5\xa6\x69\x43\xf4\x33\x55\x6b\xab\x9c\x0d\xb1\xf1\x26\xa8\x50\x4d\x4d\xa7\x83\x1a\x1f\x39\x6f\x9f\x9b\x2a\x1e\x75\x26\xea\x5a\x47\x9d\x9e\xb8\x34\xbc\x3c\xfe\x9d\xa5\x88\xfe\x1b\xd7\xb0\x3e\xbe\xb7\x76\xfe\x74\xe7\xf6\x2d\x79\xf3\xc6\xc1\xb2\x17\x22\x22\x22\x22\x22\xa2\x3f\x28\xba\x15\x9c\x01\xb8\x32\xd4\x57\x87\x73\xe5\xd2\x49\x44\x44\x44\x44\x44\x44\x44\xff\x2e\x5d\x03\x8f\x05\xf0\x4a\x5c\xfc\xff\xff\xf1\xfd\xff\x4d\x00\x9f\x05\xf0\x51\x00\x1f\x04\xf0\x56\x00\x67\x43\xce\x0a\xa0\x17\x4b\x5e\x9c\x88\x88\x88\x88\x88\x88\xe8\x6f\x95\x5c\xf2\x00\x52\x4a\xf9\xac\xd8\xd9\xcb\x8a\x89\x7c\x9a\x4f\x46\xbd\xee\x4c\x32\xef\x1e\xdb\xc6\xca\x68\x4e\xe3\xea\xbc\xb4\xbe\x39\x28\x76\xe5\x61\x56\x6c\x3f\xc9\x8a\xd1\xf8\xfe\x66\x72\xf1\xa2\x36\xa1\xf2\xad\x8b\xad\xed\x7f\x89\x9f\xcf\xf9\x19\xde\xdc\x48\x56\xb1\x5d\xe4\xd9\x7e\x2e\xf7\xb3\x47\xbb\xb9\x1c\xee\xcb\xcb\x11\xbe\x07\x00\x00\xff\xff\xae\xd0\xe9\x15\x00\x30\x00\x00")

func _2_project_metadataUpSqlSwpBytes() ([]byte, error) {
	return bindataRead(
		__2_project_metadataUpSqlSwp,
		".2_project_metadata.up.sql.swp",
	)
}

func _2_project_metadataUpSqlSwp() (*asset, error) {
	bytes, err := _2_project_metadataUpSqlSwpBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: ".2_project_metadata.up.sql.swp", size: 12288, mode: os.FileMode(384), modTime: time.Unix(1502797896, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var __1_initial_schemaDownSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x72\x09\xf2\x0f\x50\x08\x71\x74\xf2\x71\x55\x28\x4a\xcd\x49\x4d\x2c\x4e\xb5\xe6\x42\x12\x2b\x48\x4c\xce\x4e\x4c\x47\x15\x4b\x4c\xce\xb1\xe6\x02\x04\x00\x00\xff\xff\xd7\x9e\x4f\xa4\x38\x00\x00\x00")

func _1_initial_schemaDownSqlBytes() ([]byte, error) {
	return bindataRead(
		__1_initial_schemaDownSql,
		"1_initial_schema.down.sql",
	)
}

func _1_initial_schemaDownSql() (*asset, error) {
	bytes, err := _1_initial_schemaDownSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "1_initial_schema.down.sql", size: 56, mode: os.FileMode(436), modTime: time.Unix(1502613619, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var __1_initial_schemaUpSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\x91\xcd\x4e\xc3\x30\x10\x84\xef\x7e\x8a\x3d\xc6\x92\x2f\x04\x81\x90\x38\x05\x64\xa4\x88\x5f\xa5\x3e\xd0\x53\xb5\x72\x57\xc5\xd0\x24\xd6\xc6\xad\x78\x7c\x54\xe7\x17\x91\x00\xd7\x99\xc9\xe4\x9b\xf5\x6d\xa1\x33\xa3\xc1\x64\x37\x0f\x1a\xf2\x3b\x78\x7a\x36\xa0\x5f\xf3\x95\x59\x01\xd3\x9e\xb0\x21\x48\x04\x00\x40\x85\x25\xc1\x11\xd9\xbe\x21\x27\x67\xe9\x95\x54\x10\xf5\x2e\xb5\x71\xdb\xc1\x4d\x2f\x2e\xa5\x8a\xe6\x91\xb8\x71\x75\x35\x38\xe7\x69\x67\x94\x14\x70\x8b\x01\x21\xd0\x67\x68\x25\xcf\xf5\x3b\xd9\xf0\x33\xfb\x52\xe4\x8f\x59\xb1\x86\x7b\xbd\x4e\x4e\x14\xaa\xaf\x55\xfd\x37\x52\xc8\x6b\x21\x7e\x99\xe2\xd1\x7e\xe0\xae\x9f\xb2\xf8\xa7\xa5\x2d\xed\xd2\x03\xbb\x39\x79\x8a\x37\x16\xa8\x53\xfc\xff\x80\x68\xf7\x7f\xc1\xed\xb8\x3e\xf8\xcd\xb7\x67\x18\x0f\xed\x89\x4b\xd7\xc4\x5b\xbb\x2a\xcc\x90\x75\xb5\x6a\x52\x13\xa1\xbe\x02\x00\x00\xff\xff\x53\x97\x8f\x29\x00\x02\x00\x00")

func _1_initial_schemaUpSqlBytes() ([]byte, error) {
	return bindataRead(
		__1_initial_schemaUpSql,
		"1_initial_schema.up.sql",
	)
}

func _1_initial_schemaUpSql() (*asset, error) {
	bytes, err := _1_initial_schemaUpSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "1_initial_schema.up.sql", size: 512, mode: os.FileMode(436), modTime: time.Unix(1502613606, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var __2_project_metadataDownSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x72\x09\xf2\x0f\x50\x08\x71\x74\xf2\x71\x55\x28\x28\xca\xcf\x4a\x4d\x2e\xb1\xe6\x02\x04\x00\x00\xff\xff\xa5\x8e\xd4\xaa\x14\x00\x00\x00")

func _2_project_metadataDownSqlBytes() ([]byte, error) {
	return bindataRead(
		__2_project_metadataDownSql,
		"2_project_metadata.down.sql",
	)
}

func _2_project_metadataDownSql() (*asset, error) {
	bytes, err := _2_project_metadataDownSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "2_project_metadata.down.sql", size: 20, mode: os.FileMode(436), modTime: time.Unix(1502797856, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var __2_project_metadataUpSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x72\x0e\x72\x75\x0c\x71\x55\x08\x71\x74\xf2\x71\x55\x28\x28\xca\xcf\x4a\x4d\x2e\x51\xd0\xe0\x52\x50\x50\x50\xc8\x4b\xcc\x4d\x55\x08\x73\x0c\x72\xf6\x70\x0c\xd2\x30\x33\xd1\xd4\x01\x8b\xa6\xa4\x16\x27\x17\x65\x16\x94\x64\xe6\xe7\x29\x94\xa4\x56\x94\x40\x44\xf3\x8b\xd2\x43\x83\x7c\xe0\xaa\x8d\x4c\xcd\xa0\xca\x73\xf2\xd3\xf3\x91\xd4\x05\x04\x79\xfa\x3a\x06\x45\x2a\x78\xbb\x46\x6a\x80\xcc\xd7\xe4\xd2\xb4\xe6\x02\x04\x00\x00\xff\xff\x2c\x30\x80\xbc\x84\x00\x00\x00")

func _2_project_metadataUpSqlBytes() ([]byte, error) {
	return bindataRead(
		__2_project_metadataUpSql,
		"2_project_metadata.up.sql",
	)
}

func _2_project_metadataUpSql() (*asset, error) {
	bytes, err := _2_project_metadataUpSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "2_project_metadata.up.sql", size: 132, mode: os.FileMode(436), modTime: time.Unix(1502797888, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	".1_initial_schema.up.sql.swp":   _1_initial_schemaUpSqlSwp,
	".2_project_metadata.up.sql.swp": _2_project_metadataUpSqlSwp,
	"1_initial_schema.down.sql":      _1_initial_schemaDownSql,
	"1_initial_schema.up.sql":        _1_initial_schemaUpSql,
	"2_project_metadata.down.sql":    _2_project_metadataDownSql,
	"2_project_metadata.up.sql":      _2_project_metadataUpSql,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	".1_initial_schema.up.sql.swp":   &bintree{_1_initial_schemaUpSqlSwp, map[string]*bintree{}},
	".2_project_metadata.up.sql.swp": &bintree{_2_project_metadataUpSqlSwp, map[string]*bintree{}},
	"1_initial_schema.down.sql":      &bintree{_1_initial_schemaDownSql, map[string]*bintree{}},
	"1_initial_schema.up.sql":        &bintree{_1_initial_schemaUpSql, map[string]*bintree{}},
	"2_project_metadata.down.sql":    &bintree{_2_project_metadataDownSql, map[string]*bintree{}},
	"2_project_metadata.up.sql":      &bintree{_2_project_metadataUpSql, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
